// Este es el archivo esquema de Prisma,
// Más información en los docs: https://pris.ly/d/prisma-schema

// ¿Quieres acelerar tus consultas(queries)? o ¿quieres escalar facilmente a serverless?
// Prueba Prisma Accelerate: https://pris.ly/cli/accelerate-init

// NOTA: IMPORTANTE Comandos que ejecutan para inicializar el schema.prisma en el proyecto:
//       1) npx prisma generate
//          Genera automáticamente el código necesario para realizar consultas, actualizar datos y realizar otras operaciones en la base de datos. 
//       2) npx prisma migrate dev --name ini
//          Genera y ejecuta el código SQL para sincronizar la base de datos. Asegurando que la estructura creada en el servidor local coincida con la definida en este esquema.
//          La migración generada se almacena en el directorio "prisma/migrations/xxxxxxxxxxxxxx_ini/migration.sql".

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Ejemplo visual de este diagrama del modelo de datos:
// https://drawsql.app/teams/team-3023/diagrams/56-inventorymanagement

model Usuarios {
  usuarioId String  @id
  nombre    String
  email     String
}

model Productos {
  productoId    String  @id
  nombre        String
  precio        Float
  calificacion  Float?
  existencias   Int
  // 👇🏻 1 to Many Foreign keys Relations - Declaración de
  Ventas        Ventas[]
  Compras       Compras[]
}

model Ventas {
  ventaId        String  @id
  productoId     String
  timestamp      DateTime
  cantidad       Int
  precioUnitario Float
  montoTotal     Float
  // 👇🏻 Foreign keys reference - Declaración de
  producto       Productos @relation(fields: [productoId], references: [productoId])
}

model Compras {
  compraId      String  @id
  productoId    String
  timestamp     DateTime
  cantidad      Int
  costoUnitario Float
  costoTotal    Float
  // 👇🏻 Foreign keys reference - Declaración de
  producto      Productos @relation(fields: [productoId], references: [productoId])
}

model Gastos {
  gastoId   String  @id
  categoria String
  monto     Float
  timestamp DateTime
}

model ResumenVentas {
  resumenVentaId  String  @id
  valorTotal       Float
  porcentajeCambio Float?
  fecha            DateTime
}

model ResumenCompras {
  resumenCompraId  String  @id
  totalComprado     Float
  porcentajeCambio  Float?
  fecha             DateTime
}

model ResumenGastos {
  resumenGastoId    String  @id
  gastosTotales     Float
  fecha             DateTime
  // 👇🏻 1 to Many Foreign key Relation - Declaración de
  GastoPorCategoria GastoPorCategoria[]
}

model GastoPorCategoria {
  gastoPorCategoriaId String  @id
  resumenGastoId      String
  categoria           String
  monto               BigInt
  fecha               DateTime
  // 👇🏻 Foreign keys reference - Declaración de
  resumenGasto        ResumenGastos @relation(fields: [resumenGastoId], references: [resumenGastoId])
}